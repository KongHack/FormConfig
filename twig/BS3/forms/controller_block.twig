{% for k, hook in FC_Config.getHooks() %}
    {% if hook.getType() == constant('GCWorld\\FormConfig\\Core\\FCHook::TYPE_BLOCK_PRE') %}
        {% if hook.getMethod() ==  constant('GCWorld\\FormConfig\\Core\\FCHook::METHOD_HTML') %}
            {{ hook.getData()|raw }}
        {% elseif hook.getMethod() ==  constant('GCWorld\\FormConfig\\Core\\FCHook::METHOD_INCLUDE') %}
            {% include hook.getData() %}
        {% endif %}
        {% do FC_Config.removeHook(k) %}
    {% endif %}
{% endfor %}

<form action="{{ formUrl }}" method="post" id="{{ formId }}" enctype="multipart/form-data">
    <div class="panel panel-{{ twigOverrides.panelClass|default('sitespecific') }}">
        <div class="panel-heading">
            <div class="panel-title">{{ forms[activeForm]|raw }}</div>
        </div>
        {% if FC_Config.getRequiredIndicator() == 1 %}
            {% if FC_Config.hasRequired() %}
                <div class="text-right FC_global_required_text">
                    <span>* = required</span>
                </div>
            {% endif %}
        {% endif %}
        <div class="panel-body">
            {% if form is defined and form != '' %}
                {% include form %}
            {% else %}
                {% import '@form_config_BS3/macros/simple_form.twig' as simpleForm %}
                {{ simpleForm.render(_context) }}
            {% endif %}
        </div>
        <div class="panel-footer">
            {% if twigOverrides.submitButton is not defined %}
                <input type="submit" class="btn btn-success" value="Save" id="FC_SAVE_BTN">
            {% else %}
                {{ twigOverrides.submitButton|raw }}
            {% endif %}
        </div>
    </div>
</form>
{% if holdOn %}
    <script type="text/javascript">
        $(function(){
            var FC_HOTrip = false;
            $("#{{ formId }}:not(.FC_BOUND)").on('submit.FC',function(){
                if(!FC_HOTrip) {
                    HoldOn.open({{ FC_getConfig().general.holdOnOptions }});
                    FC_HOTrip = true;
                }
            });
        });
    </script>
{% endif %}

{% for k, hook in FC_Config.getHooks() %}
    {% if hook.getType() == constant('GCWorld\\FormConfig\\Core\\FCHook::TYPE_BLOCK_POST') %}
        {% if hook.getMethod() ==  constant('GCWorld\\FormConfig\\Core\\FCHook::METHOD_HTML') %}
            {{ hook.getData()|raw }}
        {% elseif hook.getMethod() ==  constant('GCWorld\\FormConfig\\Core\\FCHook::METHOD_INCLUDE') %}
            {% include hook.getData() %}
        {% endif %}
        {% do FC_Config.removeHook(k) %}
    {% endif %}
{% endfor %}
